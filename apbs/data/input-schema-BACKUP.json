{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://json.schemastore.org/apbs-input.json",
  "title": "APBS input",
  "description": "Input file schema for APBS electrostatics software (https://apbs.readthedocs.io/)",
  "type": "object",
  "properties": {
    "polar": {
      "items": [
        {
          "calculation_type": {
            "description": "The type of calculation to perform",
            "type": "array",
            "properties": {
              "multigrid_auto": {
                "properties": {
                  "boundary_condition": {
                    "description": "Specifies the type of boundary conditions used to solve the Poisson-Boltzmann equation.",
                    "type": "object",
                    "oneOf": [
                      {
                        "$ref": "#/definitions/calculation/boundary_conditions/zero"
                      },
                      {
                        "$ref": "#/definitions/calculation/boundary_conditions/single_sphere"
                      },
                      {
                        "$ref": "#/definitions/calculation/boundary_conditions/multiple_sphere"
                      },
                      {
                        "$ref": "#/definitions/calculation/boundary_conditions/focus"
                      },
                      {
                        "$ref": "#/definitions/calculation/boundary_conditions/map"
                      }
                    ]
                  },
                  "calculate_energy": {
                    "description": "Controls energy output from calculation.",
                    "type": "object",
                    "oneOf": [
                      {
                        "none": {
                          "description": "Do not calculate energy."
                        }
                      },
                      {
                        "total": {
                          "description": "Return the total energy for the entire system."
                        }
                      },
                      {
                        "components": {
                          "description": "Calculate and return total energy for the entire molecule as well as the energy components for each atom."
                        }
                      }
                    ]
                  },
                  "calculate_force": {
                    "description": "Controls force output from calculation.",
                    "type": "object",
                    "oneOf": [
                      {
                        "none": {
                          "description": "Do not calculate force."
                        }
                      },
                      {
                        "total": {
                          "description": "Return the total force for the entire system."
                        }
                      },
                      {
                        "components": {
                          "description": "Calculate and return total force for the entire molecule as well as the energy components for each atom."
                        }
                      }
                    ]
                  },
                  "coarse_grid_center": {
                    "$ref": "#/definitions/calculation/grid_center"
                  },
                  "coarse_grid_length": {
                    "$ref": "#/definitions/calculation/grid_length"
                  },
                  "charge_discretization": {
                    "$ref": "#/definitions/calculation/charge_discretization"
                  },
                  "grid_points": {
                    "$ref": "#/definitions/calculation/grid_points"
                  },
                  "error_tolerance": {
                    "description": "Convergence tolerance for iterative solver",
                    "type": "number"
                  },
                  "fine_grid_center": {
                    "$ref": "#/definitions/calculation/grid_center"
                  },
                  "fine_grid_length": {
                    "$ref": "#/definitions/calculation/grid_length"
                  },
                  "pb_type": {
                    "description": "Type of Poisson-Boltzmann equation being solved",
                    "oneOf": [
                      {
                        "$ref": "#/definitions/calculation/pb_types/lpbe"
                      },
                      {
                        "$ref": "#/definitions/calculation/pb_types/npbe"
                      }
                    ]
                  },
                  "ions": {
                    "$ref": "#/definitions/calculation/ions"
                  },
                  "molecule": {
                    "$ref": "#/definitions/calculation/molecule"
                  },
                  "solute_dielectric": {
                    "$ref": "#/definitions/calculation/solute_dielectric"
                  },
                  "solvent_dielectric": {
                    "$ref": "#/definitions/calculation/solvent_dielectric"
                  },
                  "surface_point_density": {
                    "$ref": "#/definitions/calculation/surface_point_density"
                  },
                  "solvent_radius": {
                    "$ref": "#/definitions/calculation/solvent_radius"
                  },
                  "molecular_surface": {
                    "$ref": "#/definitions/calculation/molecular_surface"
                  },
                  "temperature": {
                    "$ref": "#/definitions/calculation/temperature"
                  },
                  "use_map": {
                    "$ref": "#/definitions/calculation/usemap"
                  },
                  "write_scalar": {
                    "$ref": "#/definitions/calculation/write_scalar"
                  }
                },
                "required": [
                  "boundary_condition",
                  "coarse_grid_center",
                  "coarse_grid_length",
                  "charge_discretization",
                  "grid_points",
                  "fine_grid_center",
                  "fine_grid_length",
                  "pb_type",
                  "molecule",
                  "solute_dielectric",
                  "solvent_dielectric",
                  "surface_point_density",
                  "molecular_surface",
                  "temperature"
                ]
              }
            }
          }
        }
      ]
    }
  },
  "definitions": {
    "read": {
      "description": "Definitions for the READ section",
    },
    "calculation": {
      "description": "Definitions for POLAR, etc. section",
      "use_map": {
        "description": "Specify pre-calculated coefficient maps to be used in the Poisson-Boltzmann calculation. These must have been input via an earlier READ statement.",
        "type": "array",
        "items": {
          "$ref": "#/definition/calculation/map"
        }
      },
      "map": {
        "description": "Map as input by read statement. Includes type and the alias or filename for the map.",
        "oneOf": [
          {
            "dielectric": {
              "description": "Dielectric function map. This causes the code to ignore other parameters related to the dielectric coefficient.",
              "type": "string"
            }
          },
          {
            "ion_accessibility": {
              "description": "Mobile ion-accessibility function map. This causes the code to ignore other parameters related to the ion accessibility coefficient.",
              "type": "string"
            }
          },
          {
            "charge_distribution": {
              "description": "Charge distribution map. This causes the code to ignore other parameters related to charge distribution specification.",
              "type": "string"
            }
          },
          {
            "potential": {
              "description": "Potential map for use in setting boundary conditions.",
              "type": "string"
            }
          }
        ]
      },
      "temperature": {
        "description": "Temperature for calculation (in K).",
        "type": "number"
      },
      "surface_method": {
        "description": "Specify the model used to construct the dielectric and ion-accessibility coefficients",
        "type": "object",
        "oneOf": [
          {
            "molecular": {
              "description": "The dielectric coefficient is defined based on a molecular surface definition. The problem domain is divided into two spaces. The “free volume” space is defined by the union of solvent-sized spheres which do not overlap with biomolecular atoms. This free volume is assigned bulk solvent dielectric values. The complement of this space is assigned biomolecular dielectric values. With a non-zero solvent radius, this choice of coefficient corresponds to the traditional definition used for PB calculations. When the solvent radius is set to zero, this corresponds to a van der Waals surface definition. The ion-accessibility coefficient is defined by an “inflated” van der Waals model. Specifically, the radius of each biomolecular atom is increased by the radius of the ion species (as specified with the ion keyword). The problem domain is then divided into two spaces. The space inside the union of these inflated atomic spheres is assigned an ion-accessibility value of 0; the complement space is assigned bulk ion accessibility values."
            }
          },
          {
            "smoothed_molecular": {
              "description": "The dielectric and ion-accessibility coefficients are defined as for the moleclar surface. However, they are then “smoothed” by a 9-point harmonic averaging to somewhat reduce sensitivity to the grid setup as described by Bruccoleri et al. J Comput Chem 18 268-276, 1997 (doi:10.1007/s00214-007-0397-0)"
            }
          },
          {
            "cubic_spline": {
              "description": "The dielectric and ion-accessibility coefficients are defined by a cubic-spline surface as described by Im et al, Comp Phys Commun 111 (1-3) 59-75, 1998 (doi:10.1016/S0010-4655(98)00016-2). The width of the dielectric interface is controlled by the swin parameter. These spline-based surface definitions are very stable with respect to grid parameters and therefore ideal for calculating forces. However, they require substantial reparameterization of the force field; interested users should consult Nina et al, Biophys Chem 78 (1-2) 89-96, 1999 (doi:10.1016/S0301-4622(98)00236-1). Additionally, these surfaces can generate unphysical results with non-zero ionic strengths; this is an on-going area of development. The argument of this property is the the spline window width (in Å).",
              "type": "number"
            }
          },
          {
            "quintic_spline": {
              "description": "The dielectric and ion-accessibility coefficients are defined by a 7th order polynomial. This surface definition has characteristics similar to the cubic spline, but provides higher order continuity necessary for stable force calculations with atomic multipole force fields (up to quadrupole). The argument of this property is the the spline window width (in Å).",
              "type": "number"
            }
          }
        ]
      },
      "write_scalar": {
        "description": "This controls the output of scalar data calculated during the Poisson-Boltzmann run.",
        "type": "array",
        "items": {
          "description": "Information to write",
          "type": "object",
          "properties": {
            "quantity": {
              "description": "Quantity for output.",
              "oneOf": [
                {
                  "charge": {
                    "description": "Write out the biomolecular charge distribution in units of e_c Å^{-3}."
                  },
                  "potential": {
                    "description": "Write out the electrostatic potential in units of k_b T e_c^{-1}."
                  },
                  "atom_potential": {
                    "description": "Write out the electrostatic potential at each atom location in units of k_b T e_c^{-1}."
                  },
                  "solvent_accessibility": {
                    "description": "Write out the solvent accessibility defined by the molecular surface definition. Values are unitless and range from 0 (inaccessible) to 1."
                  },
                  "van_der_waals_accessibility": {
                    "description": "Write out the accessibility defined by the union of solute atomic radii."
                  },
                  "ion_accessibility": {
                    "description": "Write out the accessibility defined by the union of solute atomic radii inflated by the largest mobile ion's radius."
                  },
                  "potential_laplacian": {
                    "description": "Write out the Laplacian of the potential (∇^2 ϕ) in units of k_B T e_c^{-1} Å^{-2}."
                  },
                  "effective_charge": {
                    "description": "Write out the “effective charge density” (−∇⋅ϵ∇ϕ) in units of k_B T e_c^{-1} Å^{-2}."
                  },
                  "ion_number_density": {
                    "description": "Write out the total mobile ion number density for all ion species in units of M . The output is calculated according to the formula (for nonlinear PB calculations): ρ(x)=∑_i^N ρ_i e^{−q_i ϕ(x)−Vi(x)}, where N is the number of ion species, ρ_i is the bulk density of ion species i, q_i is the charge of ion species i, ϕ(x) is the electrostatic potential, and V_i is the solute-ion interaction potential for species i."
                  },
                  "ion_charge_density": {
                    "description": "Write out the total mobile ion charge density for all ion species in units of e_c M . The output is calculated according to the formula (for nonlinear PB calculations): ρ(x)=∑_i^N ρ_i q_i e^{−q_i ϕ(x)−Vi(x)}, where N is the number of ion species, ρ_i is the bulk density of ion species i, q_i is the charge of ion species i, ϕ(x) is the electrostatic potential, and V_i is the solute-ion interaction potential for species i."
                  },
                  "x-shifted_dielectric": {
                    "description": "Dielectric map shifed by 1/2 grid spacing in the x direction."
                  },
                  "y-shifted_dielectric": {
                    "description": "Dielectric map shifed by 1/2 grid spacing in the y direction."
                  },
                  "z-shifted_dielectric": {
                    "description": "Dielectric map shifed by 1/2 grid spacing in the z direction."
                  }
                }
              ]
            },
            "format": {
              "description": "Format for output.",
              "oneOf": [
                {
                  "$ref": "#/definitions/formats/dx"
                },
                {
                  "$ref": "#/definitions/formats/flat"
                },
                {
                  "$ref": "#/definitions/formats/gz"
                },
                {
                  "$ref": "#/definitions/formats/uhbd"
                }
              ]
            },
            "stem": {
              "description": "A string that specifies the path for the output; files are written to stem.XYZ, where the suffix XYZ is determined by the file format.",
              "type": "string"
            }
          },
          "required": [
            "quantity",
            "format",
            "stem"
          ]
        }
      },
      "ions": {
        "description": "Specify the bulk concentrations of mobile ion species present in the system. Multiple types of ions can be specified; however, only the largest ionic radius is used to determine the ion-accessibility function. The total bulk system of ions must be electroneutral which means the charge densities/concentrations of positive and negative ions must be equal.",
        "type": "array",
        "items": {
          "description": "Mobile ion species",
          "type": "object",
          "properties": {
            "charge": {
              "description": "Mobile ion species charge (units: e_c)",
              "type": "integer"
            },
            "concentration": {
              "description": "Mobile ion species concentration (units: M)",
              "type": "number"
            },
            "radius": {
              "description": "Mobile ion species radius (units: Å)",
              "type": "number"
            }
          },
          "required": [
            "charge",
            "concentration",
            "radius"
          ]
        }
      },
      "molecule": {
        "description": "Molecule for this calculation (alias or file name)",
        "type": "string"
      },
      "solvent_radius": {
        "description": "This keyword specifies the radius of the solvent molecules; this parameter is used to define various solvent-related surfaces and volumes. This value is usually set to 1.4 Å for a water-like molecular surface and set to 0 Å for a van der Waals surface.",
        "type": "number"
      },
      "surface_point_density": {
        "description": "This keyword specifies the number of quadrature points per Å^2 to use in calculation surface terms (e.g., molecular surface, solvent accessible surface). Used for non-spline surfaces."
      },
      "solvent_dielectric": {
        "description": "The value of the dielectric coefficient outside the solute; e.g. 80 for water.",
        "type": "number"
      },
      "solute_dielectric": {
        "description": "The value of the dielectric coefficient in the interior of the solute; usually a value between 2 and 20.",
        "type": "number"
      },
      "pb_types": {
        "description": "Types of Poisson-Boltzmann equation variants",
        "lpbe": {
          "description": "Linearized Poisson-Boltzmann equation"
        },
        "npbe": {
          "description": "Nonlinear Poisson-Boltzmann equation"
        }
      },
      "charge_discretization": {
        "description": "Specify the method by which the biomolecular point charges (i.e., Dirac delta functions) by which charges are mapped to the grid. As we are attempting to model delta functions, the support (domain) of these discretized charge distributions is always strongly dependent on the grid spacing.",
        "type": "object",
        "oneOf": [
          {
            "linear_spline": {
              "description": "Traditional trilinear interpolation (linear splines). The charge is mapped onto the nearest-neighbor grid points. Resulting potentials are very sensitive to grid spacing, length, and position."
            }
          },
          {
            "cubic_spline": {
              "description": "Cubic B-spline discretization. The charge is mapped onto the nearest- and next-nearest-neighbor grid points. Resulting potentials are somewhat less sensitive (than the linear spline) to grid spacing, length, and position."
            }
          },
          {
            "quintic_spline": {
              "description": "Quintic B-spline discretization. Similar to the cubic spline, except the charge/multipole is additionally mapped to include next-next-nearest neighbors (125 grid points receive charge density)."
            }
          }
        ]
      },
      "grid_center": {
        "description": "Center of coarse grid",
        "type": "object",
        "oneOf": [
          {
            "molecule_id": {
              "description": "Path name or alias for a molecule",
              "type": "string"
            }
          },
          {
            "coordinates": {
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "contains": {
                "type": "number"
              }
            }
          }
        ]
      },
      "grid_length": {
        "description": "Length of coarse grid",
        "type": "array",
        "minItems": 3,
        "maxItems": 3,
        "contains": {
          "type": "number"
        }
      },
      "grid_points": {
        "description": "Number of grid points in each direction",
        "type": "array",
        "minItems": 3,
        "maxItems": 3,
        "contains": {
          "type": "integer"
        }
      },
      "boundary_conditions": {
        
      }
    },
    "formats": {
      "uhbd": {
        "description": "UHBD scalar data format"
      },
    }
  },
  "required": [
    "read"
  ]
}