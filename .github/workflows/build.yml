---
name: Build APBS

on:
  pull_request:
  push:
    branches: [master]

env:
  WIN_DEPENDENCIES_RELEASE: "v0.4.0"
  WIN_TOOLCHAIN_FILE: '/c/vcpkg/scripts/buildsystems/vcpkg.cmake'
  FETK_VERSION: "1.8.1"

jobs:
  build:
    name: Compile Code
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'noci')"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        python-version: [3.9]

    steps:

      - name: Add msbuild to PATH
        if: startsWith(matrix.os, 'windows')  # Windows only
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Checkout reposistory
        uses: actions/checkout@master
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Mac Prereqs
        if: startsWith(matrix.os, 'macos')  # Mac only
        run: |
          brew install \
            bison \
            flex \
            swig \
            libomp \
            lapack \
            suite-sparse \
            superlu \
            boost \
            eigen \
            openblas
          brew upgrade gcc@9

      - name: Linux Prereqs and Remove broken apt repos [Ubuntu]
        if: startsWith(matrix.os, 'ubuntu')  # Linux only
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
          sudo apt-get install -yq \
            software-properties-common \
            build-essential \
            bison \
            flex \
            swig \
            libreadline-dev \
            libomp5 \
            libomp-dev \
            libsuitesparse-dev \
            libsuperlu-dev \
            libeigen3-dev \
            libboost-dev \
            libopenblas-dev

      - name: Install Window dependencies
        if: startsWith(matrix.os, 'windows')  # Windows only
        run: |
          choco install wget
          wget https://github.com/Electrostatics/cache/releases/download/${WIN_DEPENDENCIES_RELEASE}/apbs_dependencies_vcpkg.zip
          7z x apbs_dependencies_vcpkg.zip -aoa -o/c/vcpkg
          ls /c/vcpkg
          vcpkg integrate install
          vcpkg list --triplet x86-windows
        shell: bash

      - name: Configure for Windows
        if: startsWith(matrix.os, 'windows')  # Windows only
        env:
          CMAKE_PREFIX_PATH: ${VCPKG_INSTALLATION_ROOT}/installed/x86-windows
        run: |
          mkdir -p build/Release
          cd build
          echo $CMAKE_PREFIX_PATH
          cmake -DCMAKE_TOOLCHAIN_FILE=${WIN_TOOLCHAIN_FILE} -DVCPKG_TARGET_TRIPLET=x86-windows -DCMAKE_INSTALL_INCLUDEDIR=include -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DBUILD_TESTING=ON -DBUILD_TOOLS=ON -DCHECK_EPSILON=ON -DENABLE_FETK=ON -DENABLE_BEM=ON -DENABLE_GEOFLOW=ON -DENABLE_INLINE=ON -DENABLE_PBAM=ON -DENABLE_PBSAM=ON -DENABLE_PYTHON=OFF -DENABLE_TESTS=ON -DBUILD_SHARED_LIBS=OFF -DENABLE_VERBOSE_DEBUG=ON -DGET_NanoShaper=ON -DFETK_VERSION=${FETK_VERSION} -DGIT_SUBMODULE=OFF -G "Visual Studio 16 2019" -A Win32 ..
          cat CMakeCache.txt
        shell: bash

      - name: Configure and Build for Mac
        if: startsWith(matrix.os, 'macos')  # Mac only
        env:
          CMAKE_PREFIX_PATH: /usr/local/opt/openblas
        run: |
          ./.build.sh

      - name: Configure and Build for Linux
        if: startsWith(matrix.os, 'ubuntu')  # Linux only
        run: |
          ./.build.sh
        env:
          # https://codecov.io/gh/Electrostatics/apbs
          CODECOV_TOKEN: "e3a1e24c-5598-4f47-9353-7fa0ac57f98e"

      - name: Build on Windows
        if: startsWith(matrix.os, 'windows')  # Windows only
        run: |
          cd build
          cmake --build . --config Release --parallel 2 --target install

      - name: Run tests
        run: |
          cd build
          ctest -C Release --output-on-failure 

      - name: Create package for Mac and Linux
        if: startsWith(matrix.os, 'macos') || startswith(matrix.os, 'ubuntu') # Mac or Linux only
        run: |
          cd build
          cpack -C Release -G ZIP
          unzip -l APBS*.zip
          mkdir -p artifacts
          mv APBS*.zip artifacts

      - name: Create package for Windows
        if: startsWith(matrix.os, 'windows')  # Windows only
        run: |
          cd build
          /c/Program\ Files/CMake/bin/cpack.exe -C Release -G ZIP -V
          unzip -l APBS*.zip
          mkdir -p artifacts
          mv APBS*.zip artifacts
        shell: bash

      #- name: Setup tmate session
      #  if: ${{ ! success() }}
      #  uses: mxschmitt/action-tmate@v3

      - name: Upload package
        uses: actions/upload-artifact@v2
        with:
          name: APBS-${{ matrix.os }}.zip
          path: build/artifacts/APBS*.zip
          retention-days: 5

  test:
    name: Test Usage

    needs: build

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]

    steps:

      - name: Checkout reposistory
        uses: actions/checkout@master

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: APBS-ubuntu-latest.zip

      - name: Setup tmate session
      #  if: ${{ ! success() }}
        uses: mxschmitt/action-tmate@v3
